doctype html
html.no-js(lang='en', dir='ltr')
  head
    title= pageTitle
    style.
      body {
      margin: 0;
      }
      html {
      box-sizing: border-box;
      }
      h3,
      .h3,
      .type-h3,
      .c-heading-3 {
      padding: 38px 0 2px;
      font-weight: 100;
      }
      a {
      background-color: transparent;
      }
      *,
      *::before,
      *::after {
      box-sizing: inherit;
      }
      .BodyContent {
      flex: auto;
      position: relative;
      }
      body:not(.Embedded) .BodyContent {
      max-width: 1300px;
      align-self: center;
      width: 90%;
      }
      body:not(.Embedded) .BodyContent {
      margin-bottom: 30px;
      }
      #ErrorPage {
      background: white;
      text-align: center;
      padding: 12px;
      }
      body {
      font-size: 15px;
      font-family: "SegoeUI", "Helvetica Neue", Helvetica, Arial, sans-serif;
      min-width: 320px;
      color: #000;
      background-color: #fff;
      }
      body {
      margin: 0;
      }
      html,
      body {
      height: 100%;
      margin: 0;
      padding: 0;
      cursor: default;
      }
      body {
      background: white;
      display: flex;
      flex-direction: column;
      }
      html {
      font-family: sans-serif;
      -ms-text-size-adjust: 100%;
      -webkit-text-size-adjust: 100%;
      }
      h3,
      .h3,
      .type-h3,
      .c-heading-3,
      .type-sh1,
      .c-subheading-1 {
      font-size: 34px;
      line-height: 40px;
      }
      h1,
      h2,
      h3,
      h4,
      h5,
      h6,
      p {
      margin-top: 0px;
      margin-bottom: 0px;
      }
      h2,
      .h2,
      .type-h2,
      .c-heading-2 {
      font-size: 46px;
      line-height: 56px;
      }
      h2,
      .h2,
      .type-h2,
      .c-heading-2 {
      padding: 37px 0 3px;
      font-weight: 100;
      letter-spacing: -0.01em;
      }
      #ErrorPage .Header {
      font-size: 120px;
      color: #0078d7;
      line-height: 140px;
      margin-top: 5%;
      }
      h4,
      .h4,
      .type-h4,
      .c-heading-4,
      .type-sh2,
      .c-subheading-2 {
      font-size: 24px;
      line-height: 28px;
      }
      .type-sh2,
      .c-subheading-2 {
      padding: 4px 0 8px;
      font-weight: 200;
      }
      #ErrorPage .Subheader {
      display: block;
      margin: 16px 0;
      }
      #ErrorPage .Commands {
      margin-bottom: 5%;
      }
      a {
      text-decoration: none;
      color: #0078d7;
      }
      .btn.btn-primary,
      button[type='submit'].c-button {
      color: #fff;
      background-color: #0078d7;
      }
      .btn,
      button.c-button,
      a[role='button'].c-button {
      font-size: 15px;
      max-width: 374px;
      min-width: 120px;
      display: inline-block;
      margin-top: 12px;
      padding: 9px 12px 10px;
      background-color: rgba(0, 0, 0, 0.2);
      color: #000;
      border: solid 1px transparent;
      overflow: hidden;
      line-height: 1;
      text-align: center;
      white-space: nowrap;
      vertical-align: bottom;
      outline: 1px dashed transparent;
      }
      .btn,
      button.c-select-button {
      font-size: 15px;
      margin-top: 36px;
      margin-right: 12px;
      background: #FFF;
      border: 1px solid rgba(0, 0, 0, 0.4);
      color: #000;
      padding: 6px 10px;
      overflow: hidden;
      text-align: center;
      white-space: nowrap;
      }
      #ErrorPage .Commands a {
      color: white;
      cursor: pointer;
      margin-right: 0px;
      }
      #ErrorPage .Commands a:not(:hover) {
      background-color: #0078d7;
      }
  body.ShowHome.errorpage.WizardVisible.newtile.Loaded(data-bind="css: { Embedded: IsEmbedded, ShowHome: ShowHome, NoLeftPane: params.noleftpane, IsAMP: IsAMP, IsAcom: IsAcom, HasSelection: HasSelection, Loaded: IsLoaded, Authenticated: IsAuthenticated, 'modal-open': HasModalDialog, DemoPBI: DemoPBI.IsVisible, HighContrast: params.hc, errorpage: params.errorpage, home2: params.home2, typefilter2: params.typefilter2, typefilter3: params.typefilter3, homesignup: params.homesignup, WizardVisible: Filter.IsWizardVisible, newtile: params.newtile }, attr: { m: Milestone, chrome: params.chrome }")
    #ErrorPage.BodyContent.LoadDependent
      h3.Header.c-heading-2= errorCode
      .Subheader.c-subheading-2= errorMessage
      .Commands
        a.c-button.btn.btn-primary(role='button', onclick="location.assign('/')")= buttonText